confusionMatrix(predictGBM,testing$diagnosis)
confusionMatrix(predictLDA,testing$diagnosis)
confusionMatrix(combPredict,testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?plot.enet
??plot.enet
install.packages("plot.enet")
install.packages("elasticnet")
?plot.enet
install.packages("enet")
library(elasticnet)
?plot.enet
modFi3<-train(CompressiveStrength~.,method="lda",data=training)
modFi3<-train(CompressiveStrength~.,method="lasso",data=training)
plot.enet(modFi3,training$CompressiveStrength)
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
modFit3<-train(CompressiveStrength~.,method="lasso",data=training)
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
legend(attributes(model$finalModel))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE,legend=attributes(model$finalModel))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE,legend=attributes(modFit3$finalModel))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
legend(attributes(modFit3$finalModel))
par(mfrow=c(2,2))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
par(mfrow=c(1,1))
plot.enet(modFit3$finalModel,xvar="penalty",use.color=TRUE)
attributes(modFit3$finalModel)
?plot.enet
library(lubridate)  # For year() function below
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
??bats
install.packages("forecast")
library(forecast)
?bats
head(testing)
?ts
?bats
bats(testing$visitsTumblr)
forecast<-bats(testing$visitsTumblr)
str(forecast)
forecast2<-predict(forecast,testing)
tstest = ts(testing$visitsTumblr)
forecast<-bats(tstrain)
forecast2<-predict(forecast,tstest)
forecast2<-forecast(forecast,tstest)
?forecast
forecast2<-forecast(forecast)
model<-bats(tstrain)
forecast<-forecast(model)
str(forecast)
plot(forecast);
lines(tstest,col='red')
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
model<-bats(tstrain)
forecast<-forecast(model)
plot(forecast);
lines(tstest,col='red')
head(testing)
testing
?forecast
forecast<-forecast(model,600)
plot(forecast);
training
lines(tstest,col="red")
lines(rbind(tstrain,tstest,col="red")
lines(rbind(tstrain,tstest),col="red")
lines(rbind(tstrain,tstest),col="red")
plot(forecast);
lines(rbind(tstrain,tstest),col="red")
nrow(testing)
nrow(training)
nrow(testing)
forecast<-forecast(model,235)
plot(forecast);
lines(rbind(tstrain,tstest),col="red")
lines(tstest,col="red")
str(tstrain)
ts=ts(dat$visitsTumblr)
plot(forecast);
lines(ts,col="red")
str(forecast)
?forecast
forecast$level
forecast$lower
forecast$upper
data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$uppder[,2]))
data.frame(forecast$lower[,2],forecast$upper[,2],tstest)
data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$uppder[,2]))
data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$upper[,2]))
prediction<-data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$upper[,2]))
nrow(prediction)
sum(prediction$inside)/nrow(prediction)
forecast<-forecast(model,235)
plot(forecast);
lines(ts,col="red")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?svm
set.seed(325)
fitModel5<-svm(CompressiveStrength~.,data=training)
predictModel5<-predict(fitModel5,newdata=testing)
summary(RMSE)
summary(predictModel5)
predictModel5
sqrt(sum((predictModel5=testing$CompressiveStrength)^2))
RMSE=sqrt(sum((predictModel5=testing$CompressiveStrength)^2))
RMSE
accuracy(forecast,tstest)
RMSE=sqrt(sum((predictModel5=testing$CompressiveStrength)^2))/lenght(testing)
RMSE
lenght(testing)
length(testing)
RMSE=sqrt(sum((predictModel5=testing$CompressiveStrength)^2))/length(testing)
RMSE
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))
RMSE
predictModel5
testing$CompressiveStrength
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fitModel5<-svm(CompressiveStrength~.,data=training)
predictModel5<-predict(fitModel5,newdata=testing)
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))
RMSE
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
ts=ts(dat$visitsTumblr)
model<-bats(tstrain)
forecast<-forecast(model,235)
plot(forecast); lines(ts,col="red")
accuracy(forecast,tstest)
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))/nrow(testing)
RMSE
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fitModel5<-svm(CompressiveStrength~.,data=training)
predictModel5<-predict(fitModel5,newdata=testing)
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))/nrow(testing)
RMSE
nrow(testing)
length(predictModel5)
RMSE=sqrt(sum((predictModel5-testing$CompressiveStrength)^2))/length(predictModel5)
RMSE
accuracy(predictModel5,testing$CompressiveStrength)
RMSE<-accuracy(predictModel5,testing$CompressiveStrength)[,2]
RMSE
RMSE<-sqrt(sum((predictModel5 - testing$CompressiveStrength)^2))
RMSE
RMSE<-mean(sum((predictModel5 - testing$CompressiveStrength)^2))
RMSE
RMSE<-sqrt(mean((predictModel5 - testing$CompressiveStrength)^2))
RMSE
RMSE<-sqrt(sum((predictModel5 - testing$CompressiveStrength)^2)/nrow(predictModel5))
RMSE
nrow(predictModel5)
nrow(testing)
RMSE<-sqrt(sum((predictModel5 - testing$CompressiveStrength)^2)/nrow(testing))
RMSE
accuracy(forecast,tstest)
forecast
str(forecast)
accuracy(forecast$fitted.values,tstest)
accuracy(forecast$mean,tstest)
?accuracy
tstest
accuracy(forecast,tstest)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
ts=ts(dat$visitsTumblr)
model<-bats(tstrain)
forecast<-forecast(model,235)
accuracy(forecast,tstest)
nrow(tstrain)
nrow(tstest)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
nrow(tstrain)
nrow(tstest)
nrow(training)
nrow(testing)
tstrainW<-window(tstrain,start=1,end=365)
tstestW<-window(tstest,start=366,end=(365+235))
tstestW<-window(tstest,start=366,end=500)
tstestW<-window(tstest,start=365,end=500)
tstestW<-window(tstest,start=365,end=(500-0.01))
tstrainW<-window(tstrain,start=1,end=1)
tstestW<-window(tstest,start=2,end=(2-0.01))
tstrainW<-window(tstrain,start=1,end=1)
tstestW<-window(tstest,start=2,end=(2-0.01))
tstestW<-window(tstest,start=1,end=(2-0.01))
?window
tstrainW<-window(tstrain,start=1,end=1)
tstestW<-window(tstest,start=1,end=2)
forecast<-forecast(model,1)
forecast<-forecast(model,1)
accuracy(forecast,tstest)
forecast<-forecast(model,1)
accuracy(forecast,tstest)
forecast<-forecast(model,2)
accuracy(forecast,tstest)
plot(forecast); lines(ts,col="red")
training
testing
tstrainW<-window(tstrain,start=1,end=365)
tstestW<-window(tstest,start=366,end=600)
tstestW<-window(tstest,start=1,end=235)
forecast<-forecast(model,235)
accuracy(forecast,tstest)
forecast
accuracy(forecast[366:600,],tstest)
tstest
forecast[366:600,]
forecast[366:600,]
forecast$fitted
tsdat=ts(testing$visitsTumblr)
head(tsdat)
tstrainW<-window(tsdat,start=1,end=365)
tstestW<-window(tsdat,start=366,end=600)
tstrainW<-window(tsdat,start=1,end=365)
tsdat
tsdat=ts(dat$visitsTumblr)
tstrainW<-window(tsdat,start=1,end=365)
tstestW<-window(tsdat,start=366,end=600)
model<-bats(tstrainW)
forecast<-forecast(model,235)
plot(forecast); lines(tstestW,col="red")
accuracy(forecast,tstestW)
prediction<-data.frame(forecast$lower[,2],forecast$upper[,2],tstest,inside=(tstest>=forecast$lower[,2] & tstest<=forecast$upper[,2]))
sum(prediction$inside)/nrow(prediction)
tstrainW
tstestW
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
library(caret)
set.seed(33833)
modFit1<-train(y~.,method="rf",data=vowel.train)
modFit2<-train(y~.,method="gbm",data=vowel.train)
predict1<-predict(modFit1,newdata=vowel.test)
predict2<-predict(modFit2,newdata=vowel.test)
confusionMatrix(predict1,vowel.test$y)
confusionMatrix(predict2,vowel.test$y)
sum(predictData$predict1==predictData$predict2)/nrow(predictData)
library(caret)
set.seed(33833)
modFit1<-train(y~.,method="rf",data=vowel.train)
set.seed(33833)
modFit2<-train(y~.,method="gbm",data=vowel.train)
predict1<-predict(modFit1,newdata=vowel.test)
predict2<-predict(modFit2,newdata=vowel.test)
confusionMatrix(predict1,vowel.test$y)
confusionMatrix(predict2,vowel.test$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
library(caret)
modFit1<-train(y~.,method="rf",data=vowel.train)
modFit2<-train(y~.,method="gbm",data=vowel.train)
predict1<-predict(modFit1,newdata=vowel.test)
predict2<-predict(modFit2,newdata=vowel.test)
confusionMatrix(predict1,vowel.test$y)
confusionMatrix(predict2,vowel.test$y)
Sys.setenv(LANG="EN")
library(caret)
library(doMC)
library(rpart.plot)
library(rattle)
#Get data
#Get training data
data_url_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(data_url_training,'training.csv',method="curl")
training<-read.csv("training.csv")
#Get testing data
data_url_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(data_url_testing,'testing.csv',method="curl")
testing<-read.csv("testing.csv")
#Columns with NA values
naColumns<-colSums(is.na(training))!=0
cleanNaColumns<-colSums(is.na(training))==0
#Columns with DIV/0! values
div0Columns<-apply(training,2,function(x) sum(grepl("#DIV/0!",x)))!=0
cleanDiv0Columns<-apply(training,2,function(x) sum(grepl("#DIV/0!",x)))==0
#All Clean collumns
allCleanColumns<-cleanNaColumns==TRUE & cleanDiv0Columns==TRUE
training<-training[,allCleanColumns]
#Clean Testing
#Columns with NA values
naColumns<-colSums(is.na(testing))!=0
cleanNaColumns<-colSums(is.na(testing))==0
#Columns with DIV/0! values
div0Columns<-apply(testing,2,function(x) sum(grepl("#DIV/0!",x)))!=0
cleanDiv0Columns<-apply(testing,2,function(x) sum(grepl("#DIV/0!",x)))==0
#All Clean collumns
allCleanColumns<-cleanNaColumns==TRUE & cleanDiv0Columns==TRUE
testing<-testing[,allCleanColumns]
#Explicative variables - 8:59
preProcValues <- preProcess(training[8:59], method = c("YeoJohnson","center", "scale","pca"))
trainTransformed <- predict(preProcValues, training[8:59])
kmeans<-kmeans(trainTransformed[,1:15],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=trainTransformed)
qplot(PC1,PC2,colour=training$classe,data=trainTransformed)
qplot(PC1,PC2,colour=training$user_name,data=trainTransformed)
str(trainTransformed)
setwd("~/Dropbox/Rfiles/DevelopingDataProducts/Project")
write.csv(trainTransformed)
write.csv(trainTransformed)
write.csv(trainTransformed,file="pca_data.csv")
write.csv(trainTransformed[,1:3],file="pca_data.csv")
write.csv(trainTransformed[,1:2],file="pca_data.csv")
setwd("~/Dropbox/Rfiles/DevelopingDataProducts/Project/app")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Dropbox/Rfiles/DevelopingDataProducts/Project/app")
pca_data<-read.csv("pca_data.csv")
kmeans<-kmeans(pca_data[,1:2],centers=bins)
kmeans<-kmeans(pca_data[,1:2],centers=5)
kmeans<-kmeans(pca_data[,1:2],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
pca_data<-read.csv("pca_data.csv")
kmeans<-kmeans(pca_data,centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
kmeans<-kmeans(trainTransformed[,1:15],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=trainTransformed)
kmeans<-kmeans(trainTransformed[,1:10],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=trainTransformed)
write.csv(trainTransformed[,1:10],file="pca_data.csv")
pca_data<-read.csv("pca_data.csv")
kmeans<-kmeans(pca_data,centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
write.csv(trainTransformed[,1:10],file="pca_data.csv")
setwd("~/Dropbox/Rfiles/DevelopingDataProducts/Project/app")
pca_data<-read.csv("pca_data.csv")
kmeans<-kmeans(pca_data,centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
head(pca_data)
kmeans<-kmeans(trainTransformed[,1:10],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=trainTransformed)
kmeans<-kmeans(trainTransformed[,1:2],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=trainTransformed)
write.csv(trainTransformed[,1:2],file="pca_data.csv")
pca_data<-read.csv("pca_data.csv")
kmeans<-kmeans(pca_data,centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
head(pca_data)
head(trainTransformed[,1:2])
kmeans<-kmeans(pca_data[2:3],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
preProcValues <- preProcess(training[8:59], method = c("YeoJohnson","center", "scale","pca"))
trainTransformed <- predict(preProcValues, training[8:59])
write.csv(trainTransformed[,1:2],file="pca_data.csv")
pca_data<-read.csv("pca_data.csv")
kmeans<-kmeans(pca_data,centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
kmeans<-kmeans(pca_data[,-c(1)],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
shiny::runApp()
shiny::runApp()
pca_data<-read.csv("pca_data.csv")
kmeans<-kmeans(pca_data[,-c(1)],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(pca_data$PC1,pca_data$PC2)
plot(pca_data$PC1,pca_data$PC2,colour=kmeans$cluster)
shiny::runApp()
shiny::runApp()
head(pca_data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pca_data<-read.csv("pca_data.csv")[,-c(1)]
pca_data<-read.csv("pca_data.csv")[,-c(1)]
pca_data<-read.csv("pca_data.csv")[,-c(1)]
head(pca_data)
kmeans<-kmeans(pca_data[,-c(1)],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
kmeans<-kmeans(pca_data[,-c(1)],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
kmeans<-kmeans(pca_data[,-c(1)],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
kmeans<-kmeans(pca_data[,-c(1)],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
kmeans<-kmeans(pca_data[,-c(1)],centers=5)
qplot(PC1,PC2,colour=kmeans$cluster,data=pca_data)
head(pca_data)
head(pca_data)
shiny::runApp()
shiny::runApp()
head(pca_data)
pca_data<-read.csv("pca_data.csv")[,-c(1)]
head(pca_data)
setwd("~/Dropbox/Rfiles/DevelopingDataProducts/Project/app")
write.csv(trainTransformed[,1:10],file="pca_data.csv")
setwd("~/Dropbox/Rfiles/DevelopingDataProducts/Project/app")
pca_data<-read.csv("pca_data.csv")[,-c(1)]
head(pca_data)
shiny::runApp()
shiny::runApp()
testing<-testing[,allCleanColumns]
write.csv(trainTransformed[,1:2],file="pca_data.csv")
shiny::runApp()
write.csv(trainTransformed[,1:10],file="pca_data.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
trainTransformed$classe<-training$classe
trainTransformed$user_name<-training$user_name
write.csv(trainTransformed[,1:10],file="pca_data.csv")
shiny::runApp()
head(pca_data)
pca_data<-read.csv("pca_data.csv")[,-c(1)]
head(pca_data)
write.csv(trainTransformed[,1:12],file="pca_data.csv")
pca_data<-read.csv("pca_data.csv")[,-c(1)]
head(pca_data)
str(trainTransformed)
write.csv(trainTransformed[,c(1,2,3,4,5,29,30)],file="pca_data.csv")
pca_data<-read.csv("pca_data.csv")[,-c(1)]
head(pca_data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(data)
shiny::runApp()
head(pca_data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?preProcess
shiny::runApp()
shiny::runApp()
write.csv(trainTransformed[,c(1,2,3,4,5,29,30)],file="pca_data.csv")
?write.csv
write.csv(trainTransformed[,c(1,2,3,4,5,29,30)],file="pca_data.csv",row.names=FALSE)
shiny::runApp()
shiny::runApp()
shinyapps::setAccountInfo(name='rodrigoceloto', token='63C1FE4E4DA3C0D2844001F78B138B7C', secret='zD+gOGtNqG2E4viksqdCqkmg1uf9O6rEVWYhkjnn')
library(shinyapps)
install.packages("shinyapps")
install.packages("shinyapps")
install.packages('devtools')
install.packages('devtools')
